{"name": "test_duckduckgo_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"q\"]\"}\n  (Session info: chrome=140.0.7339.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nStacktrace:\n\tGetHandleVerifier [0x0x8f0c13+66051]\n\tGetHandleVerifier [0x0x8f0c54+66116]\n\t(No symbol) [0x0x6cdb33]\n\t(No symbol) [0x0x7178a8]\n\t(No symbol) [0x0x717c4b]\n\t(No symbol) [0x0x75e0a2]\n\t(No symbol) [0x0x739fd4]\n\t(No symbol) [0x0x75b7f1]\n\t(No symbol) [0x0x739d86]\n\t(No symbol) [0x0x70b53e]\n\t(No symbol) [0x0x70c414]\n\tGetHandleVerifier [0x0xb38a13+2457603]\n\tGetHandleVerifier [0x0xb339d2+2437058]\n\tGetHandleVerifier [0x0x9197f2+232930]\n\tGetHandleVerifier [0x0x909a18+167944]\n\tGetHandleVerifier [0x0x91092d+196381]\n\tGetHandleVerifier [0x0x8f8ee8+99544]\n\tGetHandleVerifier [0x0x8f9082+99954]\n\tGetHandleVerifier [0x0x8e322a+10266]\n\tBaseThreadInitThunk [0x0x76225d49+25]\n\tRtlInitializeExceptionChain [0x0x772dd6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x772dd661+561]", "trace": "def test_duckduckgo_search():\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service)\n    \n        home = DuckDuckGoHomePage(driver)\n        home.load()\n>       home.search(\"Selenium Python\")\n\ntest_scripts\\day10\\test_duckduckgo_day10.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_scripts\\day10\\duckduckgo_home.py:15: in search\n    search_box = self.driver.find_element(*self.SEARCH_BOX)\nshael\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nshael\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E3B7E7ED70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x772dd6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x772dd661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"q\"]\"}\nE         (Session info: chrome=140.0.7339.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x8f0c13+66051]\nE       \tGetHandleVerifier [0x0x8f0c54+66116]\nE       \t(No symbol) [0x0x6cdb33]\nE       \t(No symbol) [0x0x7178a8]\nE       \t(No symbol) [0x0x717c4b]\nE       \t(No symbol) [0x0x75e0a2]\nE       \t(No symbol) [0x0x739fd4]\nE       \t(No symbol) [0x0x75b7f1]\nE       \t(No symbol) [0x0x739d86]\nE       \t(No symbol) [0x0x70b53e]\nE       \t(No symbol) [0x0x70c414]\nE       \tGetHandleVerifier [0x0xb38a13+2457603]\nE       \tGetHandleVerifier [0x0xb339d2+2437058]\nE       \tGetHandleVerifier [0x0x9197f2+232930]\nE       \tGetHandleVerifier [0x0x909a18+167944]\nE       \tGetHandleVerifier [0x0x91092d+196381]\nE       \tGetHandleVerifier [0x0x8f8ee8+99544]\nE       \tGetHandleVerifier [0x0x8f9082+99954]\nE       \tGetHandleVerifier [0x0x8e322a+10266]\nE       \tBaseThreadInitThunk [0x0x76225d49+25]\nE       \tRtlInitializeExceptionChain [0x0x772dd6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x772dd661+561]\n\nshael\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "attachments": [{"name": "log", "source": "6c5360bc-1c43-411e-b647-237dac212615-attachment.txt", "type": "text/plain"}], "start": 1758642997559, "stop": 1758643013341, "uuid": "c6b34bb5-6299-46a5-aa00-3b68df06aa9d", "historyId": "20519475707947d585a3ff2b26e6c647", "testCaseId": "20519475707947d585a3ff2b26e6c647", "fullName": "test_scripts.day10.test_duckduckgo_day10#test_duckduckgo_search", "labels": [{"name": "parentSuite", "value": "test_scripts.day10"}, {"name": "suite", "value": "test_duckduckgo_day10"}, {"name": "host", "value": "Shael"}, {"name": "thread", "value": "3836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_scripts.day10.test_duckduckgo_day10"}], "titlePath": ["test_scripts", "day10", "test_duckduckgo_day10.py"]}