{"name": "test_duckduckgo_search[Automation Testing]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0xe3c333+65459]\n\tGetHandleVerifier [0x0xe3c374+65524]\n\t(No symbol) [0x0xc5d973]\n\t(No symbol) [0x0xca76e7]\n\t(No symbol) [0x0xca7a8b]\n\t(No symbol) [0x0xcedea2]\n\t(No symbol) [0x0xcc9e44]\n\t(No symbol) [0x0xceb606]\n\t(No symbol) [0x0xcc9bf6]\n\t(No symbol) [0x0xc9b38e]\n\t(No symbol) [0x0xc9c274]\n\tGetHandleVerifier [0x0x10beda3+2697763]\n\tGetHandleVerifier [0x0x10b9ec7+2677575]\n\tGetHandleVerifier [0x0xe64194+228884]\n\tGetHandleVerifier [0x0xe549f8+165496]\n\tGetHandleVerifier [0x0xe5b18d+192013]\n\tGetHandleVerifier [0x0xe447d8+99416]\n\tGetHandleVerifier [0x0xe44972+99826]\n\tGetHandleVerifier [0x0xe2ebea+10346]\n\tBaseThreadInitThunk [0x0x76077ba9+25]\n\tRtlInitializeExceptionChain [0x0x7768c3ab+107]\n\tRtlClearBits [0x0x7768c32f+191]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a75d184bb7924fe4ddb3fc1145b4a424\")>\nterm = 'Automation Testing'\n\n    @pytest.mark.parametrize(\"term\", search_term)\n    def test_duckduckgo_search(driver, term):\n        home = DuckDuckGoHomePage(driver)\n        home.load()\n        home.search(term)\n        results = DuckDuckGoResultsPage(driver)\n>       first_result_text = results.get_first_result_text()\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_scripts\\day12\\test_duckduckgo_search.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_scripts\\day12\\pages\\duckduckgo_result.py:11: in get_first_result_text\n    result = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a75d184bb7924fe4ddb3fc1145b4a424\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000017BFFB19B20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xe3c333+65459]\nE       \tGetHandleVerifier [0x0xe3c374+65524]\nE       \t(No symbol) [0x0xc5d973]\nE       \t(No symbol) [0x0xca76e7]\nE       \t(No symbol) [0x0xca7a8b]\nE       \t(No symbol) [0x0xcedea2]\nE       \t(No symbol) [0x0xcc9e44]\nE       \t(No symbol) [0x0xceb606]\nE       \t(No symbol) [0x0xcc9bf6]\nE       \t(No symbol) [0x0xc9b38e]\nE       \t(No symbol) [0x0xc9c274]\nE       \tGetHandleVerifier [0x0x10beda3+2697763]\nE       \tGetHandleVerifier [0x0x10b9ec7+2677575]\nE       \tGetHandleVerifier [0x0xe64194+228884]\nE       \tGetHandleVerifier [0x0xe549f8+165496]\nE       \tGetHandleVerifier [0x0xe5b18d+192013]\nE       \tGetHandleVerifier [0x0xe447d8+99416]\nE       \tGetHandleVerifier [0x0xe44972+99826]\nE       \tGetHandleVerifier [0x0xe2ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76077ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7768c3ab+107]\nE       \tRtlClearBits [0x0x7768c32f+191]\n\nshael\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "71b03d0a-93a9-4a2f-9d09-d02f4998e3db-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4b6ec82c-4282-4ef9-8680-84406fade2bf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "term", "value": "'Automation Testing'"}], "start": 1758694745607, "stop": 1758694760739, "uuid": "6e36fb0d-995d-49fd-98f5-e72c5e155406", "historyId": "c179a27f20f1ec17ef0b1fc9fd206674", "testCaseId": "e23b76dba21ab7273ed6e28c22f7824c", "fullName": "test_scripts.day12.test_duckduckgo_search#test_duckduckgo_search", "labels": [{"name": "parentSuite", "value": "test_scripts.day12"}, {"name": "suite", "value": "test_duckduckgo_search"}, {"name": "host", "value": "INDELNB1827"}, {"name": "thread", "value": "10196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_scripts.day12.test_duckduckgo_search"}], "titlePath": ["test_scripts", "day12", "test_duckduckgo_search.py"]}